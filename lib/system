# ~/klooj/dotfiles/lib/system
# 
#----| comment )----------------------------------------------------------+
#           system functions:
#                           small programs
#                           exploded one-liners
#                           routinely used sub-routines
#-------------------------------------------------------------------------+

#====| function ]============#=============#==============#================#
#                name        : return the name of the operating system
#                usage       : ReturnDistro
#                result      : Ubuntu, Debian, CentOS, etc
#==========================================================================#
#TODO: add further tests for bsd/darwin/xyz
ReturnOS() {
  echo "$(lsb_release -s -i)"
}

#====| function ]============#=============#==============#================#
#                name        : history efficiency formula function
#                usage       : Heff
#                result      : percentage of unrepeated commands in history
#==========================================================================#
Heff() {
  local unique_commands
  local total_commands
  local history_efficiency
  
  if [[ -s $HOME/.bash_history ]]; 
    then
      unique_commands="$(sort -u .bash_history | wc -l)"
      total_commands="$(grep '' .bash_history | wc -l)"
      history_efficiency="$(echo "scale=2; ${unique_commands}/${total_commands}*100 | bc -q)"
      printf '%s\n\n' "history efficiency percentage: ${history_efficiency}%"
    else
      printf '%s\n\n' "$HOME/.bash_history does not exist or is empty"
  fi
}

#====| function ]============#=============#==============#================#
#                name        : CleanExit
#                usage       : trap CleanBeforeExit EXIT
#                result      : clean up before script exits
#==========================================================================#
CleanExit() {
  info "Cleaning up. Done"
}
#trap CleanBeforeExit EXIT

#====| function ]============#=============#==============#================#
#                name    : SetupSSH
#                usage   : SetupSSH username
#                result  : create .ssh directory, SSH Keys and set permissions
#==========================================================================#
#increase key complexity / create two keys
SetupSSH() {
  local ssh_rsa_filename
  ssh_rsa_filename="${HOME}/.ssh/${HOSTNAME}_id_rsa"
  
  echo 'Creating SSH directory, keys, and setting permissions ... '

  ssh-keygen -q -N '' -f "$ssh_rsa_filename"
  ssh-keygen -q -N '' -f "$ssh_rsa_filename"

  chmod 600 "$ssh_rsa_filename"
  chmod 644 "${ssh_rsa_filename}.pub"
}

#====| function ]============#=============#==============#================#
#                name    : now
#                usage   : now thats what i call music
#                result  : appends message to log file in $HOME
#==========================================================================#
now() {
  echo "$(date '+%Y-%m-%d %H:%M:%S') - $@" >> "${HOME}/.now_log"
}
